/*******************************************************************************
Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the MIT or Apache License; see LICENSE in the source repository
root for authoritative license information.ï»¿

**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).
******************************************************************************/

#import "MSGraphServiceODataEntities.h"

/**
* The implementation file for type MSGraphServiceDirectoryObjectOperations.
*/

@implementation MSGraphServiceDirectoryObjectOperations

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSODataExecutable>)parent {
 
    return [super initOperationWithUrl:urlComponent parent:parent];
}

- (NSURLSessionTask *)checkMemberGroupsWithGroupIds:(NSString *) groupIds callback:(void (^)(NSMutableArray *string, MSODataException *exception))callback {
	
	NSString *groupIdsString = [self.resolver.jsonSerializer serialize:groupIds property:@"groupIds"];
	NSURLSessionTask *task = [self checkMemberGroupsRawWithGroupIds:groupIdsString callback:^(NSString *returnValue, MSODataException *exception) {
       
	   if (exception == nil) {

			NSMutableArray * result = (NSMutableArray *)[super.resolver.jsonSerializer deserialize:[returnValue dataUsingEncoding:NSUTF8StringEncoding] asClass:[NSString class]];
            callback(result, exception);
        } 
		else {

            callback(nil, exception);
        }
    }];
    
    return task;
}

- (NSURLSessionTask *)checkMemberGroupsRawWithGroupIds:(NSString *) groupIds callback:(void(^)(NSString *returnValue, MSODataException *exception))callback {

	id<MSODataRequest> request = [super.resolver createODataRequest];
	NSArray *parameters = [[NSArray alloc] initWithObjects:
                          [[NSDictionary alloc] initWithObjectsAndKeys :groupIds,@"groupIds", nil], nil];

	NSData* payload = [[MSODataBaseContainerHelper generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];

	[request setContent:payload];


	[request.url appendPathComponent:@"checkMemberGroups"];
	[request setVerb:HTTP_VERB_POST];

	NSURLSessionTask *task = [super oDataExecuteRequest:request 
											   callback:^(id<MSODataResponse> response, MSODataException *exception) {
        
		if (exception == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], exception);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], exception);
        }
    }];
    
    return task;
}
    				
- (NSURLSessionTask *)getMemberGroupsWithSecurityEnabledOnly:(BOOL) securityEnabledOnly callback:(void (^)(NSMutableArray *string, MSODataException *exception))callback {
	
	NSString *securityEnabledOnlyString = [self.resolver.jsonSerializer serialize:(securityEnabledOnly ? @"true" : @"false") property:@"securityEnabledOnly"];
	NSURLSessionTask *task = [self getMemberGroupsRawWithSecurityEnabledOnly:securityEnabledOnlyString callback:^(NSString *returnValue, MSODataException *exception) {
       
	   if (exception == nil) {

			NSMutableArray * result = (NSMutableArray *)[super.resolver.jsonSerializer deserialize:[returnValue dataUsingEncoding:NSUTF8StringEncoding] asClass:[NSString class]];
            callback(result, exception);
        } 
		else {

            callback(nil, exception);
        }
    }];
    
    return task;
}

- (NSURLSessionTask *)getMemberGroupsRawWithSecurityEnabledOnly:(NSString *) securityEnabledOnly callback:(void(^)(NSString *returnValue, MSODataException *exception))callback {

	id<MSODataRequest> request = [super.resolver createODataRequest];
	NSArray *parameters = [[NSArray alloc] initWithObjects:
                          [[NSDictionary alloc] initWithObjectsAndKeys :securityEnabledOnly,@"securityEnabledOnly", nil], nil];

	NSData* payload = [[MSODataBaseContainerHelper generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];

	[request setContent:payload];


	[request.url appendPathComponent:@"getMemberGroups"];
	[request setVerb:HTTP_VERB_POST];

	NSURLSessionTask *task = [super oDataExecuteRequest:request 
											   callback:^(id<MSODataResponse> response, MSODataException *exception) {
        
		if (exception == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], exception);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], exception);
        }
    }];
    
    return task;
}
    				
- (NSURLSessionTask *)getMemberObjectsWithSecurityEnabledOnly:(BOOL) securityEnabledOnly callback:(void (^)(NSMutableArray *string, MSODataException *exception))callback {
	
	NSString *securityEnabledOnlyString = [self.resolver.jsonSerializer serialize:(securityEnabledOnly ? @"true" : @"false") property:@"securityEnabledOnly"];
	NSURLSessionTask *task = [self getMemberObjectsRawWithSecurityEnabledOnly:securityEnabledOnlyString callback:^(NSString *returnValue, MSODataException *exception) {
       
	   if (exception == nil) {

			NSMutableArray * result = (NSMutableArray *)[super.resolver.jsonSerializer deserialize:[returnValue dataUsingEncoding:NSUTF8StringEncoding] asClass:[NSString class]];
            callback(result, exception);
        } 
		else {

            callback(nil, exception);
        }
    }];
    
    return task;
}

- (NSURLSessionTask *)getMemberObjectsRawWithSecurityEnabledOnly:(NSString *) securityEnabledOnly callback:(void(^)(NSString *returnValue, MSODataException *exception))callback {

	id<MSODataRequest> request = [super.resolver createODataRequest];
	NSArray *parameters = [[NSArray alloc] initWithObjects:
                          [[NSDictionary alloc] initWithObjectsAndKeys :securityEnabledOnly,@"securityEnabledOnly", nil], nil];

	NSData* payload = [[MSODataBaseContainerHelper generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];

	[request setContent:payload];


	[request.url appendPathComponent:@"getMemberObjects"];
	[request setVerb:HTTP_VERB_POST];

	NSURLSessionTask *task = [super oDataExecuteRequest:request 
											   callback:^(id<MSODataResponse> response, MSODataException *exception) {
        
		if (exception == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], exception);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], exception);
        }
    }];
    
    return task;
}
    				
@end